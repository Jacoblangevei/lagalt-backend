// <auto-generated />
using System;
using Lagalt_Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Lagalt_Backend.Migrations
{
    [DbContext(typeof(LagaltDbContext))]
    [Migration("20231006112335_InitialDb")]
    partial class InitialDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Lagalt_Backend.Data.Models.OwnerModels.Owner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Owner");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Password = "BestBoss123",
                            Username = "BestBoss"
                        });
                });

            modelBuilder.Entity("Lagalt_Backend.Data.Models.ProjectModels.Milestone", b =>
                {
                    b.Property<int>("MilestoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MilestoneId"), 1L, 1);

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MilestoneStatusId")
                        .HasColumnType("int");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MilestoneId");

                    b.HasIndex("MilestoneStatusId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Milestone");

                    b.HasData(
                        new
                        {
                            MilestoneId = 1,
                            Currency = "EUR",
                            Description = "Set up Azure",
                            DueDate = new DateTime(2023, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MilestoneStatusId = 1,
                            PaymentAmount = 10.99m,
                            Title = "Set up Azure"
                        });
                });

            modelBuilder.Entity("Lagalt_Backend.Data.Models.ProjectModels.MilestoneStatus", b =>
                {
                    b.Property<int>("MilestoneStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MilestoneStatusId"), 1L, 1);

                    b.Property<string>("MilestoneStatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MilestoneStatusId");

                    b.ToTable("MilestoneStatus");

                    b.HasData(
                        new
                        {
                            MilestoneStatusId = 1,
                            MilestoneStatusName = "Completed"
                        });
                });

            modelBuilder.Entity("Lagalt_Backend.Data.Models.ProjectModels.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.HasKey("ProjectId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Project");

                    b.HasData(
                        new
                        {
                            ProjectId = 1,
                            Description = "Hacking someone important",
                            Name = "Happy Hacking",
                            OwnerId = 1
                        });
                });

            modelBuilder.Entity("Lagalt_Backend.Data.Models.ProjectModels.ProjectUpdate", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("UpdateId")
                        .HasColumnType("int");

                    b.HasKey("ProjectId", "UpdateId");

                    b.HasIndex("UpdateId");

                    b.ToTable("ProjectUpdate", (string)null);

                    b.HasData(
                        new
                        {
                            ProjectId = 1,
                            UpdateId = 1
                        });
                });

            modelBuilder.Entity("Lagalt_Backend.Data.Models.ProjectModels.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"), 1L, 1);

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TagId");

                    b.ToTable("Tag");

                    b.HasData(
                        new
                        {
                            TagId = 1,
                            TagName = ".NET"
                        });
                });

            modelBuilder.Entity("Lagalt_Backend.Data.Models.ProjectModels.Update", b =>
                {
                    b.Property<int>("UpdateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UpdateId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UpdateId");

                    b.HasIndex("UserId");

                    b.ToTable("Update");

                    b.HasData(
                        new
                        {
                            UpdateId = 1,
                            Description = "Fixed everything",
                            Timestamp = new DateTime(2023, 10, 6, 13, 23, 35, 712, DateTimeKind.Local).AddTicks(9631),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Lagalt_Backend.Data.Models.UserModels.PortfolioProject", b =>
                {
                    b.Property<int>("PortfolioProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PortfolioProjectId"), 1L, 1);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PortfolioProjectDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PortfolioProjectName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PortfolioProjectId");

                    b.ToTable("PortfolioProject");

                    b.HasData(
                        new
                        {
                            PortfolioProjectId = 1,
                            EndDate = new DateTime(2001, 8, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "calculator.no",
                            PortfolioProjectDescription = "Coded a simple calculator",
                            PortfolioProjectName = "Calculator",
                            StartDate = new DateTime(2000, 8, 23, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Lagalt_Backend.Data.Models.UserModels.PortfolioProjectUser", b =>
                {
                    b.Property<int>("PortfolioProjectId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PortfolioProjectId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("PortfolioProjectUser", (string)null);

                    b.HasData(
                        new
                        {
                            PortfolioProjectId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Lagalt_Backend.Data.Models.UserModels.ProjectUser", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ProjectId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectUser", (string)null);

                    b.HasData(
                        new
                        {
                            ProjectId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Lagalt_Backend.Data.Models.UserModels.Skill", b =>
                {
                    b.Property<int>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SkillId"), 1L, 1);

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SkillId");

                    b.ToTable("Skill");

                    b.HasData(
                        new
                        {
                            SkillId = 1,
                            SkillName = "Hacking"
                        });
                });

            modelBuilder.Entity("Lagalt_Backend.Data.Models.UserModels.SkillUser", b =>
                {
                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SkillId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("SkillUser", (string)null);

                    b.HasData(
                        new
                        {
                            SkillId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Lagalt_Backend.Data.Models.UserModels.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Education")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Description = "I love coding",
                            Education = "Coding Academy",
                            Password = "Qwerty12345",
                            UserName = "UserNr1"
                        });
                });

            modelBuilder.Entity("ProjectTag", b =>
                {
                    b.Property<int>("ProjectsProjectId")
                        .HasColumnType("int");

                    b.Property<int>("TagsTagId")
                        .HasColumnType("int");

                    b.HasKey("ProjectsProjectId", "TagsTagId");

                    b.HasIndex("TagsTagId");

                    b.ToTable("ProjectTag");
                });

            modelBuilder.Entity("Lagalt_Backend.Data.Models.ProjectModels.Milestone", b =>
                {
                    b.HasOne("Lagalt_Backend.Data.Models.ProjectModels.MilestoneStatus", "MilestoneStatus")
                        .WithMany("Milestones")
                        .HasForeignKey("MilestoneStatusId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Lagalt_Backend.Data.Models.ProjectModels.Project", "Project")
                        .WithMany("Milestones")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("MilestoneStatus");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Lagalt_Backend.Data.Models.ProjectModels.Project", b =>
                {
                    b.HasOne("Lagalt_Backend.Data.Models.OwnerModels.Owner", "Owner")
                        .WithMany("Projects")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Lagalt_Backend.Data.Models.ProjectModels.ProjectUpdate", b =>
                {
                    b.HasOne("Lagalt_Backend.Data.Models.ProjectModels.Project", "Projects")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lagalt_Backend.Data.Models.ProjectModels.Update", "Updates")
                        .WithMany()
                        .HasForeignKey("UpdateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Projects");

                    b.Navigation("Updates");
                });

            modelBuilder.Entity("Lagalt_Backend.Data.Models.ProjectModels.Update", b =>
                {
                    b.HasOne("Lagalt_Backend.Data.Models.UserModels.User", "User")
                        .WithMany("Updates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lagalt_Backend.Data.Models.UserModels.PortfolioProjectUser", b =>
                {
                    b.HasOne("Lagalt_Backend.Data.Models.UserModels.PortfolioProject", "PortfolioProjects")
                        .WithMany()
                        .HasForeignKey("PortfolioProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lagalt_Backend.Data.Models.UserModels.User", "Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PortfolioProjects");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Lagalt_Backend.Data.Models.UserModels.ProjectUser", b =>
                {
                    b.HasOne("Lagalt_Backend.Data.Models.ProjectModels.Project", "Projects")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lagalt_Backend.Data.Models.UserModels.User", "Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Projects");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Lagalt_Backend.Data.Models.UserModels.SkillUser", b =>
                {
                    b.HasOne("Lagalt_Backend.Data.Models.UserModels.Skill", "Skills")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lagalt_Backend.Data.Models.UserModels.User", "Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skills");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ProjectTag", b =>
                {
                    b.HasOne("Lagalt_Backend.Data.Models.ProjectModels.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lagalt_Backend.Data.Models.ProjectModels.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Lagalt_Backend.Data.Models.OwnerModels.Owner", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Lagalt_Backend.Data.Models.ProjectModels.MilestoneStatus", b =>
                {
                    b.Navigation("Milestones");
                });

            modelBuilder.Entity("Lagalt_Backend.Data.Models.ProjectModels.Project", b =>
                {
                    b.Navigation("Milestones");
                });

            modelBuilder.Entity("Lagalt_Backend.Data.Models.UserModels.User", b =>
                {
                    b.Navigation("Updates");
                });
#pragma warning restore 612, 618
        }
    }
}
